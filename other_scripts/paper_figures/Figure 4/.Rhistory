if(NC005931$strand[i] == "+"){
if(!(NC005931$type[i] == "tRNA")){
segments(rx0[i], ry0[i], rx1[i]-60, ry1[i], col = rcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(rx0[i], ry0[i], rx1[i], ry1[i], arr.length = rarr.length[i], arr.width = arr.width, code = 2,
arr.col = rcolor_easy[i], lcol = rcolor_easy[i], segment = FALSE, arr.type = rarr.type[i], arr.adj = 1)
}else if (NC005931$strand[i] == "-"){
if(!(NC005931$type[i] == "tRNA")){
segments(rx1[i], ry0[i], rx0[i]+60, ry1[i], col = rcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(rx1[i], ry0[i], rx0[i], ry1[i], arr.length = rarr.length[i], arr.width = arr.width, code = 2,
arr.col = rcolor_easy[i], lcol = rcolor_easy[i], segment = FALSE, arr.type = rarr.type[i], arr.adj = 1)
}else{
segments(rx1[i], ry0[i], rx0[i]+60, ry1[i], col = rcolor_easy[i], lend=1, lwd=10, lty=2)
}
}
####VGP####
for(i in 1:length(vx0)) {
if(bStrHab1$strand[i] == "+"){
if(!(bStrHab1$type[i] == "tRNA")){
segments(vx0[i], vy0[i], vx1[i]-60, vy1[i], col = vcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(vx0[i], vy0[i], vx1[i], vy1[i], arr.length = varr.length[i], arr.width = arr.width, code = 2,
arr.col = vcolor_easy[i], lcol = vcolor_easy[i], segment = FALSE, arr.type = varr.type[i], arr.adj = 1)
}else{
if(!(bStrHab1$type[i] == "tRNA")){
segments(vx1[i], vy0[i], vx0[i]+60, vy1[i], col = vcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(vx1[i], vy0[i], vx0[i], vy1[i], arr.length = varr.length[i], arr.width = arr.width, code = 2,
arr.col = vcolor_easy[i], lcol = vcolor_easy[i], segment = FALSE, arr.type = varr.type[i], arr.adj = 1)
}
}
linMap <- function(x)
(x*3/max(x))
y<-read.csv("bStrHab1.cov", sep="\t", header = FALSE)
y<-linMap(y)
for(i in 1:tail(rx1, n=1)) {
segments(i, 21.5, i+1, 21.5+y[i,], col = "gray")
}
repeat1<-cbind(seq(from = 3074, to = 3074+985, by = 1))
n=100
color = ""
for(i in 1:nrow(repeat1)) {
color[i]<-randomColor(hue="blue")
}
DrawArc(x = repeat1-130, y = rep(11+8,length(repeat1)), rx = rep(40,length(repeat1)), ry = -rep(4,length(repeat1)),
theta.1 = 0.140, theta.2 = 3, nv = 1000,
col = color, lty = par("lty"), lwd = par("lwd"),
plot = TRUE)
dev.off()
png("Fig. 2c.png", width = 4500, height = 2500)
###########################
xlim <- c(0 , 6500)
ylim <- c(0, 30)
plot(0, type = "n", xlim = xlim, ylim = ylim,
main = "", axes=FALSE, ylab='', xlab='')
text(labels="c", x=35, y=27.5, cex=10, font=2, family="Arial")
lwd <- 150
arr.width <- 4.5
arr.length <- 1.25
############bStrHab1############
##loading data
bStrHab1<-read.csv("bStrHab1.txt", na.strings = c(".", "N"), sep="\t", header = FALSE)
names(bStrHab1) <- c("dataset", "start","end","type","name","stat","strand")
vcolor_easy = c("#d5ba4d", "#4DBBD5FF", "#DC0000FF", "#00A087FF")[bStrHab1$type]
varr.length = c(arr.length, arr.length, arr.length, arr.length)[bStrHab1$type]
varr.type = c("triangle", "triangle", "triangle", "triangle")[bStrHab1$type]
vx0 <- bStrHab1$start
vy0 <- rep(20,13)
vx1 <- bStrHab1$end
vy1 <- rep(20,13)
NC005931<-read.csv("NC_005931.1.txt", na.strings = c(".", "N"), sep="\t", header = FALSE)
names(NC005931) <- c("dataset", "start","end","type","name","stat","strand")
rcolor_easy = c("black", "#d5ba4d", "#4DBBD5FF", "#DC0000FF", "#00A087FF")[NC005931$type]
rarr.length = c(0, arr.length, arr.length, arr.length, arr.length)[NC005931$type]
rarr.type = c("NA","triangle", "triangle", "triangle", "triangle")[NC005931$type]
rx0 <- NC005931$start
ry0 <- rep(10,14)
rx1 <- NC005931$end
ry1 <- rep(10,14)
###LABS###
segments(0, 25, 6339, 25, col = "black", lwd=6)
text(labels="NC_005931.1", x=150, y=7.5, cex=10, font=1, family="Arial", pos = 4)
text(labels="S. habroptilus", x=150, y=17.5, cex=10, font=1, family="Arial", pos = 4)
start = 14000
offset = 14000-13649
labels1=seq(from = start/1000, to = 17, by = 1)
x1=seq(from = 0, to = 3180, by = 1000)
x2=seq(from = start-200, to = start + 4180-200, by = 200)
for(i in 1:length(x1)) {
text(labels=labels1[i], x=x1[i]+offset, y=27, cex=10, font=1, family="Arial", pos = 1)
segments(x1[i]+offset, 25, x1[i]+offset, 25.5, col = "black", lwd=6)
}
for(i in x2) {
segments(i-start+offset, 25, i-start+offset, 25.25, col = "black", lwd=6)
}
labels2=seq(from = 0, to = 2,by = 1)
x3=seq(from = 4181, to = 6339, by = 1000)
x4=seq(from = 4181, to = 6339, by = 200)
for(i in 1:length(x3)) {
text(labels=labels2[i], x=x3[i], y=27, cex=10, font=1, family="Arial", pos = 1)
segments(x3[i], 25, x3[i], 25.5, col = "black", lwd=6)
}
for(i in x4) {
segments(i, 25, i, 25.25, col = "black", lwd=6)
}
###RECT###
rect(vx0[7], vy0[8], rx1[11], ry1[14], density = NULL, angle = 45,
col = rgb(255, 165, 0, max = 255, alpha = 50), border = NA, lty = par("lty"), lwd = par("lwd"))
rect(vx0[1], vy0[1], rx1[6], ry1[8], density = NULL, angle = 45,
col = rgb(255, 165, 0, max = 255, alpha = 50), border = NA, lty = par("lty"), lwd = par("lwd"))
####REF####
for(i in 1:length(rx0)) {
if(NC005931$strand[i] == "+"){
if(!(NC005931$type[i] == "tRNA")){
segments(rx0[i], ry0[i], rx1[i]-60, ry1[i], col = rcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(rx0[i], ry0[i], rx1[i], ry1[i], arr.length = rarr.length[i], arr.width = arr.width, code = 2,
arr.col = rcolor_easy[i], lcol = rcolor_easy[i], segment = FALSE, arr.type = rarr.type[i], arr.adj = 1)
}else if (NC005931$strand[i] == "-"){
if(!(NC005931$type[i] == "tRNA")){
segments(rx1[i], ry0[i], rx0[i]+60, ry1[i], col = rcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(rx1[i], ry0[i], rx0[i], ry1[i], arr.length = rarr.length[i], arr.width = arr.width, code = 2,
arr.col = rcolor_easy[i], lcol = rcolor_easy[i], segment = FALSE, arr.type = rarr.type[i], arr.adj = 1)
}else{
segments(rx1[i], ry0[i], rx0[i]+60, ry1[i], col = rcolor_easy[i], lend=1, lwd=10, lty=2)
}
}
####VGP####
for(i in 1:length(vx0)) {
if(bStrHab1$strand[i] == "+"){
if(!(bStrHab1$type[i] == "tRNA")){
segments(vx0[i], vy0[i], vx1[i]-60, vy1[i], col = vcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(vx0[i], vy0[i], vx1[i], vy1[i], arr.length = varr.length[i], arr.width = arr.width, code = 2,
arr.col = vcolor_easy[i], lcol = vcolor_easy[i], segment = FALSE, arr.type = varr.type[i], arr.adj = 1)
}else{
if(!(bStrHab1$type[i] == "tRNA")){
segments(vx1[i], vy0[i], vx0[i]+60, vy1[i], col = vcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(vx1[i], vy0[i], vx0[i], vy1[i], arr.length = varr.length[i], arr.width = arr.width, code = 2,
arr.col = vcolor_easy[i], lcol = vcolor_easy[i], segment = FALSE, arr.type = varr.type[i], arr.adj = 1)
}
}
linMap <- function(x)
(x*3/max(x))
y<-read.csv("bStrHab1.cov", sep="\t", header = FALSE)
y<-linMap(y)
for(i in 1:tail(rx1, n=1)) {
segments(i, 21.5, i+1, 21.5+y[i,], col = "gray")
}
repeat1<-cbind(seq(from = 3074, to = 3074+985, by = 1))
n=100
color = ""
for(i in 1:nrow(repeat1)) {
color[i]<-randomColor(hue="blue")
}
DrawArc(x = repeat1-130, y = rep(11+8,length(repeat1)), rx = rep(40,length(repeat1)), ry = -rep(4,length(repeat1)),
theta.1 = 0.140, theta.2 = 3, nv = 1000,
col = color, lty = par("lty"), lwd = par("lwd"),
plot = TRUE)
dev.off()
png("Fig. 2b.png", width = 4500, height = 2500)
###########################
xlim <- c(0 , 6500)
ylim <- c(0, 30)
plot(0, type = "n", xlim = xlim, ylim = ylim,
main = "", axes=FALSE, ylab='', xlab='')
text(labels="b", x=35, y=27.5, cex=10, font=2, family="Arial")
lwd <- 150
arr.width <- 4.5
arr.length <- 1.25
############bAquChr1############
##loading data
bAquChr1<-read.csv("bAquChr1.txt", na.strings = c(".", "N"), sep="\t", header = FALSE)
names(bAquChr1) <- c("dataset", "start","end","type","name","stat","strand")
vcolor_easy = c("#d5ba4d", "#4DBBD5FF", "#DC0000FF", "#00A087FF")[bAquChr1$type]
varr.length = c(arr.length, arr.length, arr.length, arr.length)[bAquChr1$type]
varr.type = c("triangle", "triangle", "triangle", "triangle")[bAquChr1$type]
vx0 <- bAquChr1$start
vy0 <- rep(20,13)
vx1 <- bAquChr1$end
vy1 <- rep(20,13)
NC_024087<-read.csv("NC_024087.1.txt", na.strings = c(".", "N"), sep="\t", header = FALSE)
names(NC_024087) <- c("dataset", "start","end","type","name","stat","strand")
rcolor_easy = c("black", "#d5ba4d", "#4DBBD5FF", "#DC0000FF", "#00A087FF")[NC_024087$type]
rarr.length = c(0, arr.length, arr.length, arr.length, arr.length)[NC_024087$type]
rarr.type = c("NA","triangle", "triangle", "triangle", "triangle")[NC_024087$type]
rx0 <- NC_024087$start
ry0 <- rep(10,14)
rx1 <- NC_024087$end
ry1 <- rep(10,14)
###LABS###
segments(0, 25, 6339, 25, col = "black", lwd=6)
text(labels="NC_024087.1", x=150, y=7.5, cex=10, font=1, family="Arial", pos = 4)
text(labels="A. chrysaetos", x=150, y=17.5, cex=10, font=1, family="Arial", pos = 4)
start = 15000
offset = 15000-14529
labels1=seq(from = start/1000, to = 18, by = 1)
x1=seq(from = 0, to = 3733, by = 1000)
x2=seq(from = start-400, to = start + 3733-400, by = 200)
for(i in 1:length(x1)) {
text(labels=labels1[i], x=x1[i]+offset, y=27, cex=10, font=1, family="Arial", pos = 1)
segments(x1[i]+offset, 25, x1[i]+offset, 25.5, col = "black", lwd=6)
}
for(i in x2) {
segments(i-start+offset, 25, i-start+offset, 25.25, col = "black", lwd=6)
}
labels2=seq(from = 0, to = 2,by = 1)
x3=seq(from = 3734, to = 6339, by = 1000)
x4=seq(from = 3734, to = 6339, by = 200)
for(i in 1:length(x3)) {
text(labels=labels2[i], x=x3[i], y=27, cex=10, font=1, family="Arial", pos = 1)
segments(x3[i], 25, x3[i], 25.5, col = "black", lwd=6)
}
for(i in x4) {
segments(i, 25, i, 25.25, col = "black", lwd=6)
}
###RECT###
rect(vx0[8]+10, vy0[8], rx1[12], ry1[12], density = NULL, angle = 45,
col = rgb(255, 165, 0, max = 255, alpha = 50), border = NA, lty = par("lty"), lwd = par("lwd"))
rect(vx0[1], vy0[1], rx1[7], ry1[8], density = NULL, angle = 45,
col = rgb(255, 165, 0, max = 255, alpha = 50), border = NA, lty = par("lty"), lwd = par("lwd"))
####REF####
for(i in 1:length(rx0)) {
if(NC_024087$strand[i] == "+"){
if(!(NC_024087$type[i] == "tRNA")){
segments(rx0[i], ry0[i], rx1[i]-60, ry1[i], col = rcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(rx0[i], ry0[i], rx1[i], ry1[i], arr.length = rarr.length[i], arr.width = arr.width, code = 2,
arr.col = rcolor_easy[i], lcol = rcolor_easy[i], segment = FALSE, arr.type = rarr.type[i], arr.adj = 1)
}else if (NC_024087$strand[i] == "-"){
if(!(NC_024087$type[i] == "tRNA")){
segments(rx1[i], ry0[i], rx0[i]+60, ry1[i], col = rcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(rx1[i], ry0[i], rx0[i], ry1[i], arr.length = rarr.length[i], arr.width = arr.width, code = 2,
arr.col = rcolor_easy[i], lcol = rcolor_easy[i], segment = FALSE, arr.type = rarr.type[i], arr.adj = 1)
}else{
segments(rx1[i], ry0[i], rx0[i]+60, ry1[i], col = rcolor_easy[i], lend=1, lwd=10, lty=2)
}
}
repeat1<-cbind(seq(from = 2472-98+70, to = 2472+70, by = 1))
n=100
for(i in 1:nrow(repeat1)) {
color[i]<-randomColor(hue="blue")
}
DrawArc(x = repeat1-110, y = rep(11-2,length(repeat1)), rx = rep(40,length(repeat1)), ry = -rep(4,length(repeat1)),
theta.1 = 0.145, theta.2 = 3, nv = 1000,
col = color, lty = par("lty"), lwd = par("lwd"),
plot = TRUE)
####VGP####
for(i in 1:length(vx0)) {
if(bAquChr1$strand[i] == "+"){
if(!(bAquChr1$type[i] == "tRNA")){
segments(vx0[i], vy0[i], vx1[i]-60, vy1[i], col = vcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(vx0[i], vy0[i], vx1[i], vy1[i], arr.length = varr.length[i], arr.width = arr.width, code = 2,
arr.col = vcolor_easy[i], lcol = vcolor_easy[i], segment = FALSE, arr.type = varr.type[i], arr.adj = 1)
}else{
if(!(bAquChr1$type[i] == "tRNA")){
segments(vx1[i], vy0[i], vx0[i]+60, vy1[i], col = vcolor_easy[i], lend=1, lwd=lwd)
}
Arrows(vx1[i], vy0[i], vx0[i], vy1[i], arr.length = varr.length[i], arr.width = arr.width, code = 2,
arr.col = vcolor_easy[i], lcol = vcolor_easy[i], segment = FALSE, arr.type = varr.type[i], arr.adj = 1)
}
}
linMap <- function(x)
(x*3/max(x))
y<-read.csv("bAquChr1.cov", sep="\t", header = FALSE)
y<-linMap(y)
for(i in 1:tail(rx1, n=1)) {
segments(i, 21.5, i+1, 21.5+y[i,], col = "gray")
}
repeat1<-cbind(seq(from = 3733-1058+70, to = 3733+70, by = 1))
n=100
color = ""
for(i in 1:nrow(repeat1)) {
color[i]<-randomColor(hue="blue")
}
DrawArc(x = repeat1-130, y = rep(11+8,length(repeat1)), rx = rep(40,length(repeat1)), ry = -rep(4,length(repeat1)),
theta.1 = 0.140, theta.2 = 3, nv = 1000,
col = color, lty = par("lty"), lwd = par("lwd"),
plot = TRUE)
dev.off()
setwd("~/Documents/VGP/com/papers/mitoVGP/Figure 6/")
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
library(tibble)
library(ggpubr)
library(reshape)
library(taxonomizr)
library(data.table)
library(purrr)
library(forcats)
#fetch NCBI db
prepareDatabase('accessionTaxa.sql')
#load RefSeq data
table1 <- read.csv("mitochondrion AND srcdb_refseq[PROP] AND complete [TITLE] NOT complete cds[TITLE] NOT isolate NOT voucher_03302020.txt", header=FALSE, sep="\t")
names(table1) <- c("Header", "Length", "Accession")
table1$Length <- gsub(" bp circular DNA", "\\1", table1$Length)
table1$Length <- gsub(" bp linear DNA", "\\1", table1$Length)
table1$Length <- as.numeric(gsub(",", "\\1", table1$Length))
table1 = transform(table1, Accession = colsplit(Accession, split = " ", names = c('Accession', 'GI')))
taxaId_Genbank<-accessionToTaxa(as.character(table1$Accession$Accession),"accessionTaxa.sql")
taxons_Genbank<-getTaxonomy(taxaId_Genbank,'accessionTaxa.sql')
table1 <- cbind(table1,taxaId_Genbank, taxons_Genbank)
#load VGP data
table2 <- read.csv("../Figure 3/VGP_lengths.txt", header=TRUE, sep="\t")
taxaId_VGP<-getId(as.character(table2$Species),'accessionTaxa.sql')
taxons_VGP<-getTaxonomy(taxaId_VGP,'accessionTaxa.sql')
table2 <- cbind(table2,taxaId_VGP, taxons_VGP)
table2[table2$ID == "fScaArg1",8]<-"Perciformes"
table2[table2$ID == "fParRan2",8]<-"Perciformes"
table2<-filter(table2, !order %in% c("Forcipulatida","Elopiformes", "Cariamiformes")) %>% droplevels()
#sample RefSeq according to VGP orders
sample_scheme <- data.frame(order = levels(table2$order),
n = group_size(table2 %>% group_by(order)))
d1<-bind_rows(replicate(1000, table1 %>% nest(-order) %>% left_join(sample_scheme, by = "order") %>% replace_na(list(n = 0)) %>% mutate(Sample = map2(data, n, sample_n)) %>% unnest(Sample) %>% select(Header, Length), simplify = FALSE))
colnames(d1) <- c("Species","Length")
d2<-data.frame(table2$Species, table2$Length)
colnames(d2) <- c("Species","Length")
#combine datasets
data <- bind_rows("Genbank" = d1, "VGP dataset" = d2, .id = "groups")
#statistics
var.test(d1$Length, d2$Length)
t.result<-t.test(d1$Length, d2$Length, var.equal = TRUE)
t.pvalue<-format.pval(pv = t.result$p.value, digits = 2, eps = 0, nsmall = 3)
ks.result<-ks.test(d1$Length, d2$Length)
ks.pvalue<-format.pval(pv = ks.result$p.value, digits = 2, eps = 0, nsmall = 3)
png("Fig. 6.png", width = 2000, height = 600)
#plot
plot1<-ggplot(data, aes(x = Length)) +
stat_density(data=d1, aes(x = Length, y = ..density.. * 150 * 200, color="RefSeq dataset",fill="RefSeq dataset"), adjust = 5,position="identity",geom="area", size = 2, alpha=0.7) +
geom_area(data=d2, aes(y = ..density.. * 150 * 200, color="VGP dataset", fill="VGP dataset"),
size = 2, stat = 'density', alpha=0.5) +
geom_histogram(data=d2,aes(y = ..count..),
binwidth = 200,
colour = "#dbc446",
fill = "#fae678", alpha=0.5, size=0.6) +
geom_vline(data=d1, aes(xintercept=mean(Length)),
color="#335eaa", linetype="dashed", size=2)+
geom_vline(data=d2, aes(xintercept=mean(Length)),
color="#ffd700", linetype="dashed", size=2)+
geom_rug(data=d1, color="#335eaa", size=1.5)+
geom_rug(data=d2, color="#ffd700", size=1.5)+
theme(axis.line = element_line(size = 0.6, colour = "black"),
panel.background = element_rect(fill = "white"),
axis.ticks = element_line(colour = "black", size=(0.6)),
axis.ticks.length = unit(.50, "cm"),
axis.title = element_text(family = "Arial",
size = rel(4)),
axis.text = element_text(family = "Arial",
size = rel(4)),
legend.position = c(0.95, 0.80),
legend.justification = c("right", "top"),
legend.text = element_text(family = "Arial",
size = rel(4)),
legend.key.size = unit(6, 'lines')
) +
labs(y="Counts", x = "Assembly length (bp)") +
scale_x_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE))+
annotate("text", x = 20000, y = 35, label = paste0("t-test: p-value = ",t.pvalue,"\nKolmogorov–Smirnov test: p-value = ",ks.pvalue), family = "Arial",size = 15) +
scale_color_manual(values = c('VGP dataset' = '#ffd700', 'RefSeq dataset' = '#335eaa')) +
scale_fill_manual(name="", values = c('VGP dataset' = '#ffd700', 'RefSeq dataset' = '#335eaa')) +
labs(color="")
plot1
dev.off()
setwd("~/Documents/VGP/com/papers/mitoVGP/submission_version/Figure 4/")
table1 <- read.csv("mitochondrion AND srcdb_refseq[PROP] AND complete [TITLE] NOT complete cds[TITLE] NOT isolate NOT voucher_03302020.txt", header=FALSE, sep="\t")
names(table1) <- c("Header", "Length", "Accession")
table1$Length <- gsub(" bp circular DNA", "\\1", table1$Length)
table1$Length <- gsub(" bp linear DNA", "\\1", table1$Length)
table1$Length <- as.numeric(gsub(",", "\\1", table1$Length))
table1 = transform(table1, Accession = colsplit(Accession, split = " ", names = c('Accession', 'GI')))
taxaId_Genbank<-accessionToTaxa(as.character(table1$Accession$Accession),"accessionTaxa.sql")
taxons_Genbank<-getTaxonomy(taxaId_Genbank,'accessionTaxa.sql')
table1 <- cbind(table1,taxaId_Genbank, taxons_Genbank)
#load VGP data
table2 <- read.csv("../Figure 3/VGP_lengths.txt", header=TRUE, sep="\t")
taxaId_VGP<-getId(as.character(table2$Species),'accessionTaxa.sql')
taxons_VGP<-getTaxonomy(taxaId_VGP,'accessionTaxa.sql')
table2 <- cbind(table2,taxaId_VGP, taxons_VGP)
table2[table2$ID == "fScaArg1",8]<-"Perciformes"
table2[table2$ID == "fParRan2",8]<-"Perciformes"
table2<-filter(table2, !order %in% c("Forcipulatida","Elopiformes", "Cariamiformes")) %>% droplevels()
#sample RefSeq according to VGP orders
sample_scheme <- data.frame(order = levels(table2$order),
n = group_size(table2 %>% group_by(order)))
d1<-bind_rows(replicate(1000, table1 %>% nest(-order) %>% left_join(sample_scheme, by = "order") %>% replace_na(list(n = 0)) %>% mutate(Sample = map2(data, n, sample_n)) %>% unnest(Sample) %>% select(Header, Length), simplify = FALSE))
colnames(d1) <- c("Species","Length")
d2<-data.frame(table2$Species, table2$Length)
colnames(d2) <- c("Species","Length")
#combine datasets
data <- bind_rows("Genbank" = d1, "VGP dataset" = d2, .id = "groups")
#statistics
var.test(d1$Length, d2$Length)
t.result<-t.test(d1$Length, d2$Length, var.equal = TRUE)
t.pvalue<-format.pval(pv = t.result$p.value, digits = 2, eps = 0, nsmall = 3)
ks.result<-ks.test(d1$Length, d2$Length)
ks.pvalue<-format.pval(pv = ks.result$p.value, digits = 2, eps = 0, nsmall = 3)
png("Fig. 6.png", width = 2000, height = 600)
#plot
plot1<-ggplot(data, aes(x = Length)) +
stat_density(data=d1, aes(x = Length, y = ..density.. * 150 * 200, color="RefSeq dataset",fill="RefSeq dataset"), adjust = 5,position="identity",geom="area", size = 2, alpha=0.7) +
geom_area(data=d2, aes(y = ..density.. * 150 * 200, color="VGP dataset", fill="VGP dataset"),
size = 2, stat = 'density', alpha=0.5) +
geom_histogram(data=d2,aes(y = ..count..),
binwidth = 200,
colour = "#dbc446",
fill = "#fae678", alpha=0.5, size=0.6) +
geom_vline(data=d1, aes(xintercept=mean(Length)),
color="#335eaa", linetype="dashed", size=2)+
geom_vline(data=d2, aes(xintercept=mean(Length)),
color="#ffd700", linetype="dashed", size=2)+
geom_rug(data=d1, color="#335eaa", size=1.5)+
geom_rug(data=d2, color="#ffd700", size=1.5)+
theme(axis.line = element_line(size = 0.6, colour = "black"),
panel.background = element_rect(fill = "white"),
axis.ticks = element_line(colour = "black", size=(0.6)),
axis.ticks.length = unit(.50, "cm"),
axis.title = element_text(family = "Arial",
size = rel(4)),
axis.text = element_text(family = "Arial",
size = rel(4)),
legend.position = c(0.95, 0.80),
legend.justification = c("right", "top"),
legend.text = element_text(family = "Arial",
size = rel(4)),
legend.key.size = unit(6, 'lines')
) +
labs(y="Counts", x = "Assembly length (bp)") +
scale_x_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE))+
annotate("text", x = 20000, y = 35, label = paste0("t-test: p-value = ",t.pvalue,"\nKolmogorov–Smirnov test: p-value = ",ks.pvalue), family = "Arial",size = 15) +
scale_color_manual(values = c('VGP dataset' = '#ffd700', 'RefSeq dataset' = '#335eaa')) +
scale_fill_manual(name="", values = c('VGP dataset' = '#ffd700', 'RefSeq dataset' = '#335eaa')) +
labs(color="")
plot1
dev.off()
#load RefSeq data
table1 <- read.csv("mitochondrion AND srcdb_refseq[PROP] AND complete [TITLE] NOT complete cds[TITLE] NOT isolate NOT voucher_03302020.txt", header=FALSE, sep="\t")
names(table1) <- c("Header", "Length", "Accession")
table1$Length <- gsub(" bp circular DNA", "\\1", table1$Length)
table1$Length <- gsub(" bp linear DNA", "\\1", table1$Length)
table1$Length <- as.numeric(gsub(",", "\\1", table1$Length))
table1 = transform(table1, Accession = colsplit(Accession, split = " ", names = c('Accession', 'GI')))
taxaId_Genbank<-accessionToTaxa(as.character(table1$Accession$Accession),"accessionTaxa.sql")
taxons_Genbank<-getTaxonomy(taxaId_Genbank,'accessionTaxa.sql')
table1 <- cbind(table1,taxaId_Genbank, taxons_Genbank)
#load VGP data
table2 <- read.csv("../Figure 4/VGP_lengths.txt", header=TRUE, sep="\t")
taxaId_VGP<-getId(as.character(table2$Species),'accessionTaxa.sql')
taxons_VGP<-getTaxonomy(taxaId_VGP,'accessionTaxa.sql')
table2 <- cbind(table2,taxaId_VGP, taxons_VGP)
table2[table2$ID == "fScaArg1",8]<-"Perciformes"
table2[table2$ID == "fParRan2",8]<-"Perciformes"
table2<-filter(table2, !order %in% c("Forcipulatida","Elopiformes", "Cariamiformes")) %>% droplevels()
#sample RefSeq according to VGP orders
sample_scheme <- data.frame(order = levels(table2$order),
n = group_size(table2 %>% group_by(order)))
d1<-bind_rows(replicate(1000, table1 %>% nest(-order) %>% left_join(sample_scheme, by = "order") %>% replace_na(list(n = 0)) %>% mutate(Sample = map2(data, n, sample_n)) %>% unnest(Sample) %>% select(Header, Length), simplify = FALSE))
colnames(d1) <- c("Species","Length")
d2<-data.frame(table2$Species, table2$Length)
colnames(d2) <- c("Species","Length")
#combine datasets
data <- bind_rows("Genbank" = d1, "VGP dataset" = d2, .id = "groups")
#statistics
var.test(d1$Length, d2$Length)
t.result<-t.test(d1$Length, d2$Length, var.equal = TRUE)
t.pvalue<-format.pval(pv = t.result$p.value, digits = 2, eps = 0, nsmall = 3)
ks.result<-ks.test(d1$Length, d2$Length)
ks.pvalue<-format.pval(pv = ks.result$p.value, digits = 2, eps = 0, nsmall = 3)
png("Fig. 6.png", width = 2000, height = 600)
#plot
plot1<-ggplot(data, aes(x = Length)) +
stat_density(data=d1, aes(x = Length, y = ..density.. * 150 * 200, color="RefSeq dataset",fill="RefSeq dataset"), adjust = 5,position="identity",geom="area", size = 2, alpha=0.7) +
geom_area(data=d2, aes(y = ..density.. * 150 * 200, color="VGP dataset", fill="VGP dataset"),
size = 2, stat = 'density', alpha=0.5) +
geom_histogram(data=d2,aes(y = ..count..),
binwidth = 200,
colour = "#dbc446",
fill = "#fae678", alpha=0.5, size=0.6) +
geom_vline(data=d1, aes(xintercept=mean(Length)),
color="#335eaa", linetype="dashed", size=2)+
geom_vline(data=d2, aes(xintercept=mean(Length)),
color="#ffd700", linetype="dashed", size=2)+
geom_rug(data=d1, color="#335eaa", size=1.5)+
geom_rug(data=d2, color="#ffd700", size=1.5)+
theme(axis.line = element_line(size = 0.6, colour = "black"),
panel.background = element_rect(fill = "white"),
axis.ticks = element_line(colour = "black", size=(0.6)),
axis.ticks.length = unit(.50, "cm"),
axis.title = element_text(family = "Arial",
size = rel(4)),
axis.text = element_text(family = "Arial",
size = rel(4)),
legend.position = c(0.95, 0.80),
legend.justification = c("right", "top"),
legend.text = element_text(family = "Arial",
size = rel(4)),
legend.key.size = unit(6, 'lines')
) +
labs(y="Counts", x = "Assembly length (bp)") +
scale_x_continuous(labels=function(x) format(x, big.mark = ",", scientific = FALSE))+
annotate("text", x = 20000, y = 35, label = paste0("t-test: p-value = ",t.pvalue,"\nKolmogorov–Smirnov test: p-value = ",ks.pvalue), family = "Arial",size = 15) +
scale_color_manual(values = c('VGP dataset' = '#ffd700', 'RefSeq dataset' = '#335eaa')) +
scale_fill_manual(name="", values = c('VGP dataset' = '#ffd700', 'RefSeq dataset' = '#335eaa')) +
labs(color="")
plot1
dev.off()
